<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="E001" xml:space="preserve">
    <value>Not a valid UTF8 character</value>
  </data>
  <data name="E002" xml:space="preserve">
    <value>The index is outside the area of the array.</value>
  </data>
  <data name="E003" xml:space="preserve">
    <value>Arrays cannot be referenced by name.</value>
  </data>
  <data name="E004" xml:space="preserve">
    <value>The target file does not exist.:{0}</value>
  </data>
  <data name="E005" xml:space="preserve">
    <value>Failed to parse the value.:{0}</value>
  </data>
  <data name="E006" xml:space="preserve">
    <value>The name of the table array is duplicated.:{0}</value>
  </data>
  <data name="E007" xml:space="preserve">
    <value>Already defined in a non-table.:{0}</value>
  </data>
  <data name="E008" xml:space="preserve">
    <value>Unknown token.:{0}</value>
  </data>
  <data name="E009" xml:space="preserve">
    <value>Illegal numeric character.:{0}</value>
  </data>
  <data name="E010" xml:space="preserve">
    <value>Failed to get key string.:{0}</value>
  </data>
  <data name="E011" xml:space="preserve">
    <value>Unknown escape sequence.:{0}</value>
  </data>
  <data name="E012" xml:space="preserve">
    <value>Failed to get integer.:{0}</value>
  </data>
  <data name="E013" xml:space="preserve">
    <value>Failed to get the real number.:{0}</value>
  </data>
  <data name="E014" xml:space="preserve">
    <value>The inline table could not be retrieved.:{0}</value>
  </data>
  <data name="E015" xml:space="preserve">
    <value>The array could not be retrieved.:{0}</value>
  </data>
  <data name="E016" xml:space="preserve">
    <value>Time is incorrect.:{0}</value>
  </data>
  <data name="E017" xml:space="preserve">
    <value>The minutes are incorrect.:{0}</value>
  </data>
  <data name="E018" xml:space="preserve">
    <value>The date could not be retrieved:{0}</value>
  </data>
  <data name="E019" xml:space="preserve">
    <value>Failed to get time.:{0}</value>
  </data>
  <data name="E020" xml:space="preserve">
    <value>The value cannot be indexed.</value>
  </data>
  <data name="E021" xml:space="preserve">
    <value>The value cannot be referenced by name.</value>
  </data>
  <data name="E022" xml:space="preserve">
    <value>The string could not be retrieved.:{0}</value>
  </data>
  <data name="E023" xml:space="preserve">
    <value>There is no element with the specified key.</value>
  </data>
  <data name="E024" xml:space="preserve">
    <value>Tables cannot be index-referenced.</value>
  </data>
  <data name="E025" xml:space="preserve">
    <value>There is no table with the specified name.:{0}</value>
  </data>
  <data name="E026" xml:space="preserve">
    <value>There is no element with the specified name.:{0}</value>
  </data>
  <data name="E027" xml:space="preserve">
    <value>Specifying an array that is out of bounds.</value>
  </data>
  <data name="E028" xml:space="preserve">
    <value>The table definition must be a new row. :{0}</value>
  </data>
  <data name="E029" xml:space="preserve">
    <value>The key, value must be in a new row. :{0}</value>
  </data>
  <data name="E030" xml:space="preserve">
    <value>The table is not closed.:{0}</value>
  </data>
  <data name="E031" xml:space="preserve">
    <value>The table array is not closed.:{0}</value>
  </data>
  <data name="E032" xml:space="preserve">
    <value>Failed to parse the key. :{0}</value>
  </data>
  <data name="E033" xml:space="preserve">
    <value>Key not found. :{0}</value>
  </data>
  <data name="E034" xml:space="preserve">
    <value>There must be a single equal symbol between the key and the value. :{0}</value>
  </data>
  <data name="E035" xml:space="preserve">
    <value>Failed to parse the value. :{0}</value>
  </data>
  <data name="E036" xml:space="preserve">
    <value>The end of the string cannot be found. :{0}</value>
  </data>
  <data name="E037" xml:space="preserve">
    <value>Three or more single quotes in a row are not allowed. :{0}</value>
  </data>
  <data name="E038" xml:space="preserve">
    <value>The elements of the item are not separated by commas. :{0}</value>
  </data>
  <data name="E039" xml:space="preserve">
    <value>The elements of the inline table are not separated by commas. :{0}</value>
  </data>
  <data name="E040" xml:space="preserve">
    <value>Failed to parse inline table. :{0}</value>
  </data>
  <data name="E041" xml:space="preserve">
    <value>The inline table is not closed. :{0}</value>
  </data>
  <data name="E042" xml:space="preserve">
    <value>The elements of the array are not separated by commas. :{0}</value>
  </data>
  <data name="E043" xml:space="preserve">
    <value>Failed to parse array. :{0}</value>
  </data>
  <data name="E044" xml:space="preserve">
    <value>The array is not closed. :{0}</value>
  </data>
  <data name="E045" xml:space="preserve">
    <value>A literal that cannot be parsed. :{0}</value>
  </data>
  <data name="E046" xml:space="preserve">
    <value>Characters that cannot be used in numbers. :{0}</value>
  </data>
  <data name="E047" xml:space="preserve">
    <value>Failed to parse numeric values. :{0}</value>
  </data>
  <data name="E048" xml:space="preserve">
    <value>The number of digits has been exceeded. :{0}</value>
  </data>
  <data name="E049" xml:space="preserve">
    <value>Both sides of the underscore must have at least one digit. :{0}</value>
  </data>
  <data name="E050" xml:space="preserve">
    <value>The exponential notation is wrong. :{0}</value>
  </data>
  <data name="E051" xml:space="preserve">
    <value>There is only one decimal point. :{0}</value>
  </data>
  <data name="E052" xml:space="preserve">
    <value>Both sides of the decimal point must have at least one digit. :{0}</value>
  </data>
  <data name="E053" xml:space="preserve">
    <value>Signed hexadecimal numbers are not allowed. :{0}</value>
  </data>
  <data name="E054" xml:space="preserve">
    <value>Signed octal numbers are not allowed. :{0}</value>
  </data>
  <data name="E055" xml:space="preserve">
    <value>Signed binary numbers are not allowed. :{0}</value>
  </data>
  <data name="E056" xml:space="preserve">
    <value>Leading zeros are not allowed. :{0}</value>
  </data>
  <data name="E057" xml:space="preserve">
    <value>Failed to parse time. :{0}</value>
  </data>
  <data name="E058" xml:space="preserve">
    <value>Failed to parse the date. :{0}</value>
  </data>
</root>